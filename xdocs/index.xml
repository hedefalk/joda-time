<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

 <properties>
  <title>Java date and time API - Home</title>
  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
  <author email="almajor@boxspoon.com">Al Major</author>
 </properties>

 <body>

<section name="Joda Time - Java date and time API">
<p>
Joda-Time provides a quality replacement for the Java <em>date</em>
and <em>time</em> classes. The design allows for multiple <em>calendar</em>
systems, while still providing a simple API.
The 'default' calendar is the <a href="cal_iso.html">ISO8601</a> standard which
is used by XML. The Gregorian, Julian, Buddhist and Coptic systems are also
included, and we welcome further additions. Supporting classes include time zone,
duration, format and parsing.
</p>
<subsection name="Quick example">
<p>
<source>
DateTime dt = new DateTime();
int year = dt.getYear();
String monthText = dt.monthOfYear().getAsText();
boolean leap = dt.year().isLeap();
Period oneMonthSixDays = new Period().withMonths(1).withDays(6);
DateTime laterDate = dt.plus(oneMonthSixDays);
String dateAsISO8601Format = dt.toString();
</source>
</p>
</subsection>
</section>


<section name="Why Joda Time?">
<p>
Joda-Time has been created to radically change date and time handling is Java.
The JDK classes Date and Calendar are very badly designed, have had numerous bugs
and have odd performance effects.
Here are some of our reasons for developing and using Joda-Time:
<ul>
<li><b>Easy to Use</b>. Calendar makes accessing 'normal' dates difficult, due to the
lack of simple methods. Joda-Time has straightforward field accessors.</li>
<li><b>Easy to Extend</b>. The JDK supports multiple calendar systems via subclasses
of <code>Calendar</code>.
This is clunky, and in practice it is very difficult to write another calendar system.
Joda-Time supports multiple calendar systems via a pluggable system based on the
<code>Chronology</code> class.</li>
<li><b>Comprehensive Feature Set</b>. The library is intended to provide all the
functionality that is required for date-time calculations. It already provides
out-of-the-box features, such as support for oddball date formats, which are difficult
to replicate with the JDK.</li>
<li><b>Up-to-date Time Zone calculations</b>. The timezone implementation is based on
the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>. As these files are updated (several times a year),
Joda-Time incorporates the changes. The user always has up-to-date timezone
computations.</li>
<li><b>Calendar support</b>. The library currently provides 6 calendar systems. More
will be added in the future.</li>
<li><b>Easy interoperability</b>. The library internally uses a millisecond instant
which is identical to the JDK and similar to other common time representations. This makes
interoperability easy, and Joda-Time comes with out-of-the-box JDK interoperability.</li>
<li><b>Better Performance Characteristics</b>. Calendar has strange performance characteristics
as it recalculates fields at unexpected moments. Joda-Time does only the minimal
calculation for the field that is being accessed.</li>
<li><b>Good Test Coverage</b>. Joda-Time has a comprehensive set of developer tests,
providing assurance of the library's quality.</li>
<li><b>Complete Documentation</b>. There is an introductory
<a href="userguide.html">User Guide</a> which provides an overview and covers
common usage scenarios. The <a href="api-0.98/index.html">javadoc</a>
is extremely detailed and covers most of the API.</li>
<li><b>Maturity</b>. The library has been under active development since 2002.
Although it continues to be improved with the addition of new features and
bug-fixes, it is a mature and reliable code base.</li>
<li><b>Open Source</b>. Joda-Time is licenced under the <a href="license.html">Joda licence</a>,
which is an Apache/BSD cloned licence and is relatively unrestricted.</li>
</ul>
</p>
</section>

<section name="Documentation">
<p>
Various documentation is available:
<ul>
<li>The <a href="userguide.html">user guide</a> which is a good starting point</li>
<li>The key concepts and chronology documents in the left navigation area</li>
<li>The javadoc for the <a href="api-0.98/index.html">current release</a></li>
<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
<li>A <a href="faq.html">FAQ</a> list</li>
<li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime">CVS repository</a></li>
</ul>
</p>
</section>

<section name="Releases">
<p>
<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 0.98</a>
is the current latest release.
This release is a stable release that has extensive testing suites.
As a result of these testing suites, the main API has been firmed up and is not intended to change beyond now.
</p>
<p>
We now recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
If there is no negative feedback to 0.98, then 1.0 should follow swiftly.
When the final 1.0 release is made, our intention is to support the release as would be expected.
</p>
</section>

<section name="Support">
<p>
For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
</p>
<p>
Alternatively, you can contact the project lead, Stephen Colebourne via
<a href="mailto:scolebourne@users.sourceforge.net">scolebourne@users.sourceforge.net</a>.
</p>
</section>
</body>
</document>
