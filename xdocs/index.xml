<?xml version="1.0" encoding="ISO-8859-1"?>

<document>

 <properties>
  <title>Java date and time API - Home</title>
  <author email="scolebourne@users.sourceforge.net">Stephen Colebourne</author>
  <author email="almajor@boxspoon.com">Al Major</author>
 </properties>

 <body>

<section name="Joda Time - Java date and time API">
<p>
Joda-Time provides a quality replacement for the Java <em>date</em>
and <em>time</em> classes. The design allows for multiple <em>calendar</em>
systems, while still providing a simple API.
The 'default' calendar is the <a href="cal_iso.html">ISO8601</a> standard which
is used by XML. The Gregorian, Julian, Buddhist, Coptic and Ethiopic systems are also
included, and we welcome further additions. Supporting classes include time zone,
duration, format and parsing.
</p>
<p>
As a flavour of Joda-Time, here's some example code:
<source>
public boolean isRentalOverdue(<b>DateTime</b> datetimeRented) {
  <b>Period</b> rentalPeriod = Period.days(2);
  return datetimeRented.plus(rentalPeriod).isBeforeNow()
}
public boolean isJoinedInLastThreeMonths(<b>DateTime</b> datetimeJoined) {
  <b>Interval</b> last3Months = new Interval(Period.months(3), new DateTime());
  return last3Months.contains(datetimeJoined);
}
public String getBirthMonthText(<b>YearMonthDay</b> dateOfBirth) {
  return dateOfBirth.monthOfYear().getAsText(Locale.ENGLISH);
}
</source>
Version 1.2.1 was released on 2006-02-12 -
<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Download now</a>
</p>
</section>


<section name="Why Joda Time?">
<p>
Joda-Time has been created to radically change date and time handling is Java.
The JDK classes Date and Calendar are very badly designed, have had numerous bugs
and have odd performance effects.
Here are some of our reasons for developing and using Joda-Time:
<ul>
<li><b>Easy to Use</b>. Calendar makes accessing 'normal' dates difficult, due to the
lack of simple methods. Joda-Time has straightforward field accessors.</li>
<li><b>Easy to Extend</b>. The JDK supports multiple calendar systems via subclasses
of <code>Calendar</code>.
This is clunky, and in practice it is very difficult to write another calendar system.
Joda-Time supports multiple calendar systems via a pluggable system based on the
<code>Chronology</code> class.</li>
<li><b>Comprehensive Feature Set</b>. The library is intended to provide all the
functionality that is required for date-time calculations. It already provides
out-of-the-box features, such as support for oddball date formats, which are difficult
to replicate with the JDK.</li>

<li><b>Up-to-date Time Zone calculations</b>. The timezone implementation is based on
the public <a href="http://www.twinsun.com/tz/tz-link.htm">tz database</a>, which is
updated several times a year. New Joda-Time releases incorporate all changes
made to this database. Should the changes be needed earlier, manually updating
and building Joda-Time is easy.</li>
<li><b>Calendar support</b>. The library currently provides 6 calendar systems. More
will be added in the future.</li>
<li><b>Easy interoperability</b>. The library internally uses a millisecond instant
which is identical to the JDK and similar to other common time representations. This makes
interoperability easy, and Joda-Time comes with out-of-the-box JDK interoperability.</li>
<li><b>Better Performance Characteristics</b>. Calendar has strange performance characteristics
as it recalculates fields at unexpected moments. Joda-Time does only the minimal
calculation for the field that is being accessed.</li>
<li><b>Good Test Coverage</b>. Joda-Time has a comprehensive set of developer tests,
providing assurance of the library's quality.</li>
<li><b>Complete Documentation</b>. There is a full
<a href="userguide.html">User Guide</a> which provides an overview and covers
common usage scenarios. The <a href="api-release/index.html">javadoc</a>
is extremely detailed and covers most of the API.</li>
<li><b>Maturity</b>. The library has been under active development since 2002.
Although it continues to be improved with the addition of new features and
bug-fixes, it is a mature and reliable code base.</li>
<li><b>Open Source</b>. Joda-Time is licenced under the business friendly
<a href="license.html">Apache License Version 2.0</a>.</li>
</ul>
</p>
</section>

<section name="Documentation">
<p>
Various documentation is available:
<ul>
<li>Two user guides - <a href="quickstart.html">quick</a> and <a href="userguide.html">full</a></li>
<li>The key concepts and chronology documents in the left navigation area</li>
<li>The javadoc for the <a href="api-release/index.html">current release</a></li>
<li>The javadoc for the <a href="apidocs/index.html">latest CVS</a></li>
<li>A <a href="faq.html">FAQ</a> list</li>
<li>Information on <a href="installation.html">downloading and installing</a> Joda-Time</li>
<li>The <a href="http://cvs.sourceforge.net/viewcvs.py/joda-time/JodaTime">CVS repository</a></li>
</ul>
</p>
</section>

<section name="Releases">
<p>
<a href="http://sourceforge.net/project/showfiles.php?group_id=97367&amp;package_id=104212">Release 1.2.1</a>
is the current latest release.
This release is considered stable and worthy of the 1.x tag.
It has extensive testing suites and has been used in production.
We now recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.
</p>
<p>
We will support the 1.x product line using standard Java mechanisms.
The main public API will remain backwards compatible for both source and binary.
The version number will change to 2.0 to indicate a change in compatibility.
</p>
</section>

<section name="Support">
<p>
For support on bugs, using the library or to volunteer please contact the <a href="mail-lists.html">mailing list</a>
(or email direct to the list via <a href="mailto:joda-interest@lists.sourceforge.net">joda-interest@lists.sourceforge.net</a>).
</p>
<p>
Alternatively, you can contact the project lead, Stephen Colebourne via
<a href="mailto:scolebourne@users.sourceforge.net">scolebourne@users.sourceforge.net</a>.
</p>
</section>
</body>
</document>
