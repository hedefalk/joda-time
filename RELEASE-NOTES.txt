Joda-Time version 2.0
---------------------

Joda-Time is a date and time handling library that seeks to replace the JDK
Date and Calendar classes.

This is the eighth release of Joda-Time.
This release contains enhancements, bug fixes and a time zone update.

We recommend JDK 1.4 or later, and have performed no testing on earlier JDKs.

Joda-Time is licensed under the business-friendly Apache License Version 2.
This is the same license as all of Apache, plus other open source projects such as Spring.
The intent is to make the code available to the Java community with the minimum
of restrictions. If the license causes you problems please contact the mailing list.

**  Please also check out our related projects   **
** http://joda-time.sourceforge.net/related.html **


Enhancements since 1.6
----------------------
- Move to Java 5, with generics

- Add static factory method millis() to Duration [2648777]
  This checks for and returns the singleton value for ZERO

- Support pluggable locale text and additional locales in JDK 6 [2690370]
  Extra info accessed by reflection if JDK 6 used

- Better error messages for invalid time zone ids [2781835]

- Allow 'Z' and 'ZZ' in format patterns to parse 'Z' as '+00:00' [2827359]

- Add LocalDate.toDate() [2465359]
  This provides a direct conversion to JDK Date which handles DST and
  time zone data differences


Compatibility with 1.6
----------------------
Binary compatible - No
Source compatible - No

Deprecated methods removed:
- Chronology.getISO()
- Chronology.getISOUTC()
- Chronology.getISO(DateTimeZone)
- Chronology.getGJ()
- Chronology.getGJUTC()
- Chronology.getGJ(DateTimeZone)
- Chronology.getGregorian()
- Chronology.getGregorianUTC()
- Chronology.getGregorian(DateTimeZone)
- Chronology.getJulian()
- Chronology.getJulianUTC()
- Chronology.getJulian(DateTimeZone)
- Chronology.getBuddhist()
- Chronology.getBuddhistUTC()
- Chronology.getBuddhist(DateTimeZone)
- Chronology.getCoptic()
- Chronology.getCopticUTC()
- Chronology.getCoptic(DateTimeZone)
- LocalDate.toDateTimeAtMidnight()
- LocalDate.toDateTimeAtMidnight(DateTimeZone)

Serialization compatible - Yes

Data compatible - Yes, except
  - DateTimeZone data updated to version 2009m

Semantic compatible - Yes


Deprecations since 1.6
----------------------
- DateTimeFormatter.getChronolgy() [2783325]
  Incorrect spelling - new method DateTimeFormatter.getChronology()


Bug fixes since 1.6
-------------------
- LocalDate.toInterval() [2487417]
  Now handles time zones which have no midnight at DST cutover

- Period formatting concurrency [2820871]
  Fix possible concurrency hole in PeriodFormatBuilder.Separator

- Javadoc fix in Months [2721880]


Feedback
--------
All feedback is welcomed via the joda-interest mailing list.

The Joda team
http://joda-time.sourceforge.net
