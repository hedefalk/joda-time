Joda-Time version 1.5
---------------------

Joda-Time is a date and time handling library that seeks to replace the JDK
Date and Calendar classes.

This is the sixth full release of Joda-Time.
This release focuses on new features, but also include some bug fixes.

We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.

Joda-Time is licensed under the business-friendly Apache License Version 2.
This is the same license as all of Apache, plus other open source projects such as Spring.
The intent is to make the code available to the Java community with the minimum
of restrictions. If the license causes you problems please contact the mailing list.

*  Please also check out our related projects   *
* http://joda-time.sourceforge.net/related.html *


Enhancements since 1.4
----------------------
- LocalDate.toLocalDateTime
  - provide mechanism to create LocalDateTime from LocalDate and LocalTime

- Performance enhancement for LocalDate, LocalTime and LocalDateTime
  - equals, compareTo, Period construction

- Period.toString(PeriodFormatter), MutablePeriod.toString(PeriodFormatter)
  - allow periods to be directly formatted, as with datetimes

- DateTimeZone
  - add isStandardOffset() to assist in determining if DST applies


Compatibility with 1.4
----------------------
Binary compatible - Yes, except
  Internal class LenientDateTimeField has an incompatible change to
  getInstance() and the constructor

Source compatible - Yes, except
  Internal class LenientDateTimeField has an incompatible change to
  getInstance() and the constructor

Serialization compatible - Yes

Data compatible - Yes, except
  - Format of time zone data files changed slightly to fix bug
    This mainly affects Australia
  - DateTimeZone data updated to version 2007f

Semantic compatible - Yes


Deprecations since 1.4
----------------------
None


Bug fixes since 1.4
-------------------
- Daylight savings cutover in Spring incorrect
  A problem with DST cutover in Spring meant that the result of many
  methods would be different depending on whether the time zone was in the
  Eastern or Western hemisphere. Now, the DST cutover is consistent, such
  that if a time is requested within the cutover, it will be pushed forwards
  into summer time. [1710316, 1747219, 1755158]

- LenientChronology and time zones
  LenientChronology could throw exceptions when the time being created
  didn't exist dies to the time zone [1755161]

- LocalDate/LocalTime constructors did not set internal state correctly
  This problem was exposed when Days.daysBetween() and similar methods
  failed to give the right results

- ZoneInfoProvider now returns a copy of its internal state on getAvailableIDs
  This avoids race conditions on some JVMs

- Period formating threw NegativeArraySizeException during formatting
  This happened for certain period values, notably zero

- Period formatting could end up in an infinite loop on IBM JDK 1.4.2
  This appears to be an IBM JDK issue, not a Joda-Time issue, but we should
  not have ended up in an infinite loop whatever happens

- DateTimeZone did not properly convert fixed offset zones to java.util.TimeZone [1682152]

- DateTimeZone names were incorrect when abbreviation is the same in winter
  and summer, notably in Australia [1716305]

- Avoid compilation issue reported by Apache Harmony [1699760]

- LenientChronology might incorrectly adjust a valid hour field near DST transition

- DateTimeFormat javadoc now explains time zone parsing restriction better [OpenDiscussion 1721909]

- DateTime/Instant/LocalDateTime javadoc improved

- DateTimeZone
  Clarify javadoc of forTimeZone to indicate that application created
  SimpleTimeZone rules are not parsed [1705180]


Feedback
--------
All feedback is welcomed via the joda-interest mailing list.

The Joda team
http://joda-time.sourceforge.net
