Joda-Time version 1.2
---------------------

Joda-Time is a date and time handling library that seeks to replace the JDK
Date and Calendar classes.

This is the third full release of Joda-Time.

We recommend JDK 1.3 or later, and have performed no testing on earlier JDKs.

Joda-Time is licensed under the business-friendly Apache License Version 2.
This is the same license as all of Apache, plus other open source projects such as Spring.
The intent is to make the code available to the Java community with the minimum
of restrictions. If the license cause you problems please contact the mailing list.


Incompatible changes since 1.1
------------------------------
Binary compatible - Yes
  - v1.1 and v1.2 are binary compatible in their public and protected API

Source compatible - Yes
  - v1.1 and v1.2 are source compatible in their public and protected API

Serialization compatible - Yes

Data compatible - Yes


Warnings since 1.1
------------------
- ChronologyType
  If you have created your own subclass of Chronology, you should create
  a ChronologyType subclass to define a type for your chronology, and
  override the Chronology.getType() to return it.


Deprecations since 1.1
----------------------
- Chronology factory methods, such as getISO() and getCopticUTC()
  The ChronologyType class contains suitable replacement methods
    Chronology.getCoptic(zone)   is replaced by
    ChronologyType.coptic().getChronology(zone)
  These factory methods have been removed as they were a poor substitute
  for a proper type class, and confused the role of the Chronology class


Bug fixes since 1.1
-------------------
- ZonedChronology
  getMaximumValue(ReadablePartial)/getMinimumValue(ReadablePartial)
  Methods returned incorrect result

- ZonedChronology
  Better detection and handling of offset calculation overflow, throwing
  an ArithmeticException.

- DateTimeZone
  Handles offset calculation overflow errors for instants near Long.MAX_VALUE,
  ending the offset transition sequence.

- DateTimeFormatter
  Reverts to UTC if time zone offset calculation causes overflow. This allows at least
  the time of day fields to be printed for instants near Long.MIN_VALUE or Long.MAX_VALUE.


Enhancements since 1.1
----------------------
- ChronologyType
  New type that acts as a factory for creating Chronology instances
  Chronology.getType() returns the type

- DateTime.Property.toInterval() (also DateMidnight/MutableDateTime)
  New method to convert return an Interval object over the span of the property
  Thus dt.monthOfYear().toInterval() returns an interval from the start to
  the end of the month

- MutableDateTime.property(DateTimeFieldType)
  Gets the property by type. Complements the method already on DateTime/DateMidnight.


Feedback
--------
All feedback is welcomed at joda-interest@lists.sourceforge.net.

The Joda team
